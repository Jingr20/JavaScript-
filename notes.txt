【1】JavaScript单线程模式工作，从上往下依次执行。
    缺点：当遇到某个特别耗时的代码时，会有“假死”现象
    JavaScript将任务的执行模式分为两种：
        同步模式 Synchronous
        异步模式 Asynchronous

【2】同步模式
    任务依次执行， 上一个任务结束下一个任务才开始执行。

【3】异步模式
    不会等待这个任务结束才开始下一个任务 
    任务开启之后就立即往下执行下一个任务，后续逻辑一般通过回调函数的方式定义 
    没有异步模式的话，单线程的JavaScript语言就无法同时处理大量耗时任务
    通过 事件循环 和 消息队列 实现异步
    [注意！！]：异步和同步指运行环境提供的API是以同步或异步模式的方式工作
            如console.log() 同步
              setTimeout()  异步
    【实现机制】：
        调用栈（Call stack）、事件循环（event loop）和 消息队列/回调队列（queue）
        事件循环负责监听调用栈和消息队列，一旦调用栈中所有的任务都结束了，事件循环就从消息队列中取出第一个回调函数压入到调用栈
        当调用栈和消息队列中都没有要执行的代码时，代码执行结束
        注意： JavaScript是单线程的，但浏览器不是单线程的 


【4】回调函数 --- 所有异步编程方案的根基

【5】Promise --- window上的一个对象，EMScript 2015（ES6）提供
    优势：可以链式调用，避免回调函数嵌套，造成回调地狱
    （1）Promise对象的then方法会返回一个全新的Promise对象
    （2）后面的then方法就是为上一个then返回的Promise注册回调函数
    （3）前面的then方法中回调函数的返回值会作为后面then方法回调函数的参数
    （4）如果回调中返回的是Promise，那后面then方法的回调会等待它的结束

【6】Promise静态方法
    Promise.resolve() --- 快速把一个值转为promise对象
    Promise.reject()

【6】Promise并行执行






-------------------------------------------------------------------------------------------------
https://www.jianshu.com/p/1b63a13c2701
【1】promise是什么
    1、promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）
    2、链式调用，无需层层传递callback
    3、多个异步等待合并便于解决

【2】为什么会有promise？为了避免界面冻结（任务）

【3】异步操作的常见语法
    1、事件监听
        $('#start').on('click',start)
    2、回调

【4】异步回调的问题
    比如为了完成一个功能，我们需要调用API1、API2、API3，依次按照顺序进行调用，这个时候就会出现回调地狱的问题

【5】promise详解
    new Promise(
    function (resolve, reject) {
        // 一段耗时的异步操作
        resolve('成功') // 数据处理完成
        // reject('失败') // 数据处理出错
    }
    ).then(
        (res) => {console.log(res)},  // 成功
        (err) => {console.log(err)} // 失败
    )

    1、resolve作用
        将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled），
        在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；
    2、reject作用
        将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），
        在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去
    3、promise有三个状态
        pending[待定]初始状态
        fulfilled[实现]操作成功
        rejected[被否决]操作失败
        当promise状态发生改变，就会触发then()里的响应函数处理后续步骤；
        promise状态一经改变，不会再变。
    4、Promise对象的状态改变，只有两种可能：
        从pending变为fulfilled
        从pending变为rejected
        这两种情况只要发生，状态就凝固了，不会再变了。
    5、.then()
        （1）接收两个函数作为参数，分别代表fulfilled（成功）和rejected（失败）
        （2）.then()返回一个新的Promise实例，所以它可以链式调用
        （3）当前面的Promise状态改变时，.then()根据其最终状态，选择特定的状态响应函数执行
        （4）状态响应函数可以返回新的promise，或其他值，不返回值也可以我们可以认为它返回了一个null；
        （5）如果返回新的promise，那么下一级.then()会在新的promise状态改变之后执行
        （6）如果返回其他任何值，则会立即执行下一级.then()
    6、Promise.all() 批量执行
        Promise.all([p1, p2, p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise
        它接收一个数组作为参数
        数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变
        当所有的子Promise都完成，该Promise完成，返回值是全部值的数组
        有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果
    
    【6】


